// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// enum Role {
//   super_admin
//   admin
//   user
// }


// model User {
//   id            String    @id @default(uuid())
//   name          String
//   email         String    @unique
//   emailVerified DateTime?
//   password      String
//   role          Role      @default(user)
//   image         String?
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
//   //Relations and Indexes

// }
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // o mysql, según tu motor
  url      = env("DATABASE_URL")
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  plan      Plan     @default(FREE)
  createdAt DateTime @default(now())
  locations  Location[]
  events     Event[]

  Users UserOrganization[]

  OrganizationInvitation OrganizationInvitation[]
}

enum Plan {
  FREE
  COMMUNITY
  MISSION
}

enum Role {
  super_admin
  admin
  user
}

model User {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique
  password        String
  isSuperAdmin    Boolean  @default(false)
  role            Role      @default(user)
  
  permissions     UserEventPermission[]
  organizations   UserOrganization[]

  OrganizationInvitation OrganizationInvitation[] @relation("InvitationsSent")
}

model UserOrganization {
  userId         String
  organizationId String
  role           Role                 @default(user) // rol dentro de esa organización

  user           User                 @relation(fields: [userId], references: [id])
  organization   Organization         @relation(fields: [organizationId], references: [id])

  @@id([userId, organizationId])
}

model Location {
  id              String   @id @default(uuid())
  name            String
  address         String?
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
  events          Event[]
}

model Event {
  id             String   @id @default(uuid())
  name           String
  description    String?
  startDate      DateTime
  endDate        DateTime
  locationId     String?
  organizationId String

  organization   Organization @relation(fields: [organizationId], references: [id])
  location       Location?     @relation(fields: [locationId], references: [id])

  participantRoles ParticipantRole[]
  registrations    EventRegistration[]
  permissions      UserEventPermission[]

  EventPersonFieldRequirement EventPersonFieldRequirement[]

  EventRequiredField EventRequiredField[]
}

model ParticipantRole {
  id        String   @id @default(uuid())
  name      String
  eventId   String
  event     Event @relation(fields: [eventId], references: [id])

  registrations EventRegistration[]
}

model Person {
  id           String   @id @default(cuid())
  firstName    String
  lastName     String?
  middleName   String?
  email        String?  @unique
  phone        String?  @unique
  gender       String?  // Male, Female, Other
  birthdate  DateTime?
  birthplace   String?
  nationality  String?
  documentType String?  // Passport, ID Card, etc
  documentNumber String?
  address      String?
  city         String?
  state        String?
  country      String?
  postalCode   String?
  allergies    String?
  notes        String?
  specialNeeds  String?
  avatarUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  registrations EventRegistration[]

  FromPersonRelationship PersonRelationship[] @relation("FromPerson")

  ToPersonRelationship PersonRelationship[] @relation("ToPerson")
}

model EventRequiredField {
  id          String   @id @default(cuid())
  eventId     String
  fieldName   String
  fieldLabel  String
  isCustom    Boolean  @default(false) // Si es un campo adicional no existente en Person
  fieldType   String?  // text, number, date, select, etc. (solo si isCustom es true)
  options     Json?    // Opciones para campos tipo select, radio, etc.
  isRequired  Boolean  @default(true) // Si es obligatorio llenarlo
  createdAt   DateTime @default(now())

  event       Event    @relation(fields: [eventId], references: [id])

  @@unique([eventId, fieldName])
}



enum Gender {
  MASCULINO
  FEMENINO
  SIN_ESPECIFICAR
}

model EventPersonFieldRequirement {
  id        String   @id @default(cuid())
  eventId   String
  fieldName String   // nombre del campo de Person
  required  Boolean

  event     Event    @relation(fields: [eventId], references: [id])
}


model EventRegistration { 
  id            String   @id @default(uuid())
  personId      String
  eventId       String
  roleId        String?

  person        Person           @relation(fields: [personId], references: [id])
  event         Event            @relation(fields: [eventId], references: [id])
  role          ParticipantRole? @relation(fields: [roleId], references: [id])

  hasPaid       Boolean  @default(false)
  amountPaid    Float    @default(0)
  totalCost     Float?

  additionalInfo Json?   // <- nuevo campo para datos personalizados
  
  createdAt     DateTime @default(now())
}


model UserEventPermission {
  id         String   @id @default(uuid())
  userId     String
  eventId    String
  permission RolePermission

  user       User  @relation(fields: [userId], references: [id])
  event      Event @relation(fields: [eventId], references: [id])
}

enum RolePermission {
  ADMIN      // Puede editar todo del evento
  REGISTRAR  // Solo puede registrar personas
  TREASURER  // Solo puede registrar pagos
}

model RelationshipKind {
  id   String  @id @default(uuid())
  name String  @unique
  description String?

  relationships PersonRelationship[]
}

model PersonRelationship {
  id             String          @id @default(uuid())
  fromPerson     Person          @relation("FromPerson", fields: [fromPersonId], references: [id])
  fromPersonId   String

  toPerson       Person          @relation("ToPerson", fields: [toPersonId], references: [id])
  toPersonId     String

  relationshipKind RelationshipKind @relation(fields: [relationshipKindId], references: [id])
  relationshipKindId String

  note           String?
}


model OrganizationInvitation {
  id              String   @id @default(uuid())
  email           String
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
  invitedBy       User   @relation("InvitationsSent", fields: [invitedById], references: [id])
  invitedById     String
  role            Role  @default(user)
  status          InvitationStatus @default(PENDING)
  createdAt       DateTime @default(now())
  acceptedAt      DateTime?
  expiresAt       DateTime? 


  @@unique([email, organizationId])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  REVOKED
}
